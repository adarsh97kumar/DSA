class Solution{
    public:
    vector<string> ans;
    vector<vector<int>> direction{ 
       {1,0,5}, {-1,0,10}, {0,1,15}, {0,-1,20}
    };
    unordered_map<int, string> um { {5, "D"}, {10, "U"}, {15, "R"}, {20,"L"} };
    
    void backtrack(vector<vector<int>> &m, int r, int c, int n, string& s)
    {
        //cout<<r<<" "<<c<<endl;
        if(r == n-1 && c == n-1)
        {
            if(m[r][c] != 0)
            {
                ans.push_back(s);
                return;
            }
            
        }
        
        for(vector<int>& dir : direction)
        {
        
                if(m[r][c] != 0)
                {
                    int new_r = r + dir[0];
                    int new_c = c + dir[1];
                    if(new_r<0 || new_c<0 || new_r>=n || new_c>=n)
                        continue;
                        
                    s+=um[dir[2]];
                    m[r][c] = 0;
                    
                    backtrack(m, new_r, new_c, n, s);
                    
                    m[r][c] = 1;
                    s.pop_back();
                }
            
            
            
        }
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        string s="";
        backtrack(m, 0, 0, n, s);
        return ans;
    }
};
