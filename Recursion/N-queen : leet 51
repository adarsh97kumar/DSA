class Solution {
public:
    vector<vector<string>> ans;
    int size = 0;
    unordered_set<int> col;
    unordered_set<int> diagTopRightCol;
    unordered_set<int> diagTopLeftCol;

   /* bool isValidPos(vector<string> &board, int r, int c)
    {
        //in same col
        for(int i=r-1; i>=0; i--)
        {
            if(i>=0 && board[i][c]=='Q')
                return false;
        }
        

        //in diagonal right
        for(int i=r-1,j=c+1; i>=0,j<size; i--,j++)
        {
            if(i>=0 && j<size && board[i][j] == 'Q')
                return false;
        }


        //in diagonal left
        for(int i=r-1,j=c-1; i>=0,j>=0; i--,j--)
        {
            if(i>=0 && j>=0 && board[i][j] == 'Q')
                return false;
        }

        return true;
    }*/

    bool isValidPos(vector<string> &board, int r, int c)
    {
        

        if(col.find(c) != col.end())
            return false;

        if(diagTopRightCol.find(r+c) != diagTopRightCol.end())
            return false;
        
        if(diagTopLeftCol.find(r-c) != diagTopLeftCol.end())
            return false;

        
        return true;
    }

    void rec(vector<string> &board, int r)
    {
        if(r>=size)
        {
            cout<<"hi"<<" ";
            ans.push_back(board);
        }

        for(int c=0; c<size; c++)
        {   
            
            if(isValidPos(board, r, c))
            {
                cout<<r<<" "<<c<<endl;
                board[r][c] = 'Q';
                col.insert(c);
                diagTopRightCol.insert(r+c);
                diagTopLeftCol.insert(r-c);

                rec(board, r+1);

                board[r][c] = '.';
                col.erase(c);
                diagTopRightCol.erase(r+c);
                diagTopLeftCol.erase(r-c);
            }       
        }
    }

    vector<vector<string>> solveNQueens(int n) {
       
        vector<string> board(n, string(n,'.'));
        
        size = n;       
        rec(board, 0);
        
        return ans;
    }
};
