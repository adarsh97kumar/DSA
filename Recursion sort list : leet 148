Recursion - mergesort of linked list

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void merge(ListNode* leftHead, ListNode* rightHead, ListNode* head)
    {
        
    }

    void mergeSort(ListNode* head)
    {
        if(!head->next)
            return;

        ListNode* leftHead = findLeftHead(head);
        ListNode* rightHead = findRightHead(head);
    
        mergeSort(leftHead);
        mergeSort(rightHead);
        merge(leftHead, rightHead, head);
    }

    ListNode* sortList(ListNode* head) {
        if(!head)
            return head;
        
        mergeSort(head);
    }
};
