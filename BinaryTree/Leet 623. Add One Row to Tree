/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int currDepth, int val, int depth)
    {
        if(root == NULL)
            return;

        cout<<root->val<<":"<<currDepth<<" ";
        
        if(currDepth == depth)
        {
            TreeNode* leftTemp = root->left;
            TreeNode* rightTemp = root->right;

            TreeNode* tempLeft = new TreeNode(val, leftTemp, NULL);
            TreeNode* tempRight = new TreeNode(val, NULL, rightTemp);

            root->left = tempLeft;
            root->right = tempRight;

            return;
        }

        currDepth += 1;

        dfs(root->left, currDepth, val, depth);
        dfs(root->right, currDepth, val, depth);
    }

    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth == 1)
        {
            TreeNode* temp = new TreeNode(val, root, NULL);
            return temp;
        }

        dfs(root, 1, val, depth-1);

        return root;
    }
};
