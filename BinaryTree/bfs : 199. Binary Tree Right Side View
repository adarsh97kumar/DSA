done through bfs,
maintain a queue in which we put in the child nodes while going through that node and removing that node at last.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<int> ans;

    void solve(TreeNode* root)
    {
        if(!root)
            return;

        queue<TreeNode*> nodes;

        nodes.push(root);
        while(!nodes.empty())
        {
            int queueSize = nodes.size();

            for(int i=1; i<=queueSize; i++)
            {
                TreeNode* node = nodes.front();

                if(i==queueSize)
                {
                    ans.push_back(node->val);
                }

                if(node->left)
                    nodes.push(node->left);
                
                if(node->right)
                    nodes.push(node->right);
                
                nodes.pop();
            }
            
        }
    }

    vector<int> rightSideView(TreeNode* root) {
        solve(root);
        return ans;
    }
};
