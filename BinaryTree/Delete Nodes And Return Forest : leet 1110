have to do dfs than when coming back we need to remove the subtree, if we come from top down than suppose the node below its needed to be removed, so we will never be able to reach that node.

class Solution {
public:
    vector<TreeNode*> ans;

    TreeNode* dfs(TreeNode* root, unordered_set<int>& us)
    {
        if(!root)
            return NULL;
        

        root->left = dfs(root->left, us);
        root->right = dfs(root->right, us);
        
        
        if(us.find(root->val) != us.end())
        {
            //cout<<root->val<<":"<<prev->val<<" ";
            if(root->left)
                ans.push_back(root->left);
            
            if(root->right)
                ans.push_back(root->right);
            
            return NULL;
        }
        else
            return root;
    }

    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        
        unordered_set<int> us;
        for(int i=0; i<to_delete.size(); i++)
            us.insert(to_delete[i]);

        if(us.find(root->val) == us.end())
            ans.push_back(root);
        dfs(root, us);
        
        return ans;
    }
};
