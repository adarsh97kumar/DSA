

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;
    void dfs(TreeNode* root, int targetSum, vector<int> temp, int currSum)
    {
        if(root == NULL)
            return;

        currSum += root->val;
        temp.push_back(root->val);
       // cout<<currSum<<" ";

        if(root->left == NULL && root->right == NULL)
        {
            if(currSum == targetSum)
            {
                //temp.push_back(root->val);
                ans.push_back(temp);
            }

            return;
        }

        
        
        dfs(root->left, targetSum, temp, currSum);
        dfs(root->right, targetSum, temp, currSum);
    }


    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> temp;
        dfs(root, targetSum, temp, 0);
        return ans;
    }
};
